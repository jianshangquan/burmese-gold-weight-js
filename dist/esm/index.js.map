{"version":3,"file":"index.js","sources":["../../node_modules/bignumber.js/bignumber.js","../../src/burmese-gold-weight/si-gold-weight.js","../../src/burmese-gold-weight/burmese-gold-weight.js","../../src/burmese-gold-weight/index.js"],"sourcesContent":[";(function (globalObject) {\n  'use strict';\n\n/*\n *      bignumber.js v9.1.0\n *      A JavaScript library for arbitrary-precision arithmetic.\n *      https://github.com/MikeMcl/bignumber.js\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n *      MIT Licensed.\n *\n *      BigNumber.prototype methods     |  BigNumber methods\n *                                      |\n *      absoluteValue            abs    |  clone\n *      comparedTo                      |  config               set\n *      decimalPlaces            dp     |      DECIMAL_PLACES\n *      dividedBy                div    |      ROUNDING_MODE\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n *      exponentiatedBy          pow    |      RANGE\n *      integerValue                    |      CRYPTO\n *      isEqualTo                eq     |      MODULO_MODE\n *      isFinite                        |      POW_PRECISION\n *      isGreaterThan            gt     |      FORMAT\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n *      isInteger                       |  isBigNumber\n *      isLessThan               lt     |  maximum              max\n *      isLessThanOrEqualTo      lte    |  minimum              min\n *      isNaN                           |  random\n *      isNegative                      |  sum\n *      isPositive                      |\n *      isZero                          |\n *      minus                           |\n *      modulo                   mod    |\n *      multipliedBy             times  |\n *      negated                         |\n *      plus                            |\n *      precision                sd     |\n *      shiftedBy                       |\n *      squareRoot               sqrt   |\n *      toExponential                   |\n *      toFixed                         |\n *      toFormat                        |\n *      toFraction                      |\n *      toJSON                          |\n *      toNumber                        |\n *      toPrecision                     |\n *      toString                        |\n *      valueOf                         |\n *\n */\n\n\n  var BigNumber,\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n    mathceil = Math.ceil,\n    mathfloor = Math.floor,\n\n    bignumberError = '[BigNumber Error] ',\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n    BASE = 1e14,\n    LOG_BASE = 14,\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n    SQRT_BASE = 1e7,\n\n    // EDITABLE\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n    MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n  /*\n   * Create and return a BigNumber constructor.\n   */\n  function clone(configObject) {\n    var div, convertBase, parseNumeric,\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n      ONE = new BigNumber(1),\n\n\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n      // The default values below must be integers within the inclusive ranges stated.\n      // The values can also be changed at run-time using BigNumber.set.\n\n      // The maximum number of decimal places for operations involving division.\n      DECIMAL_PLACES = 20,                     // 0 to MAX\n\n      // The rounding mode used when rounding to the above decimal places, and when using\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n      // UP         0 Away from zero.\n      // DOWN       1 Towards zero.\n      // CEIL       2 Towards +Infinity.\n      // FLOOR      3 Towards -Infinity.\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      ROUNDING_MODE = 4,                       // 0 to 8\n\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n      // The exponent value at and beneath which toString returns exponential notation.\n      // Number type: -7\n      TO_EXP_NEG = -7,                         // 0 to -MAX\n\n      // The exponent value at and above which toString returns exponential notation.\n      // Number type: 21\n      TO_EXP_POS = 21,                         // 0 to MAX\n\n      // RANGE : [MIN_EXP, MAX_EXP]\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // Number type: -324  (5e-324)\n      MIN_EXP = -1e7,                          // -1 to -MAX\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // Number type:  308  (1.7976931348623157e+308)\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n      MAX_EXP = 1e7,                           // 1 to MAX\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      CRYPTO = false,                          // true or false\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN      1 The remainder has the same sign as the dividend.\n      //             This modulo mode is commonly known as 'truncated division' and is\n      //             equivalent to (a % n) in JavaScript.\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n      //             The remainder is always positive.\n      //\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n      // modes are commonly used for the modulus operation.\n      // Although the other rounding modes can also be used, they may not give useful results.\n      MODULO_MODE = 1,                         // 0 to 9\n\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\n      POW_PRECISION = 0,                       // 0 to MAX\n\n      // The format specification used by the BigNumber.prototype.toFormat method.\n      FORMAT = {\n        prefix: '',\n        groupSize: 3,\n        secondaryGroupSize: 0,\n        groupSeparator: ',',\n        decimalSeparator: '.',\n        fractionGroupSize: 0,\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\n        suffix: ''\n      },\n\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n      // '-', '.', whitespace, or repeated character.\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\n      alphabetHasNormalDecimalDigits = true;\n\n\n    //------------------------------------------------------------------------------------------\n\n\n    // CONSTRUCTOR\n\n\n    /*\n     * The BigNumber constructor and exported function.\n     * Create and return a new instance of a BigNumber object.\n     *\n     * v {number|string|BigNumber} A numeric value.\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\n     */\n    function BigNumber(v, b) {\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\n        x = this;\n\n      // Enable constructor call without `new`.\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n      if (b == null) {\n\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n\n          return;\n        }\n\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\n\n          // Fast path for integers, where n < 2147483648 (2**31).\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\n\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n\n            return;\n          }\n\n          str = String(v);\n        } else {\n\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n        // Exponential form?\n        if ((i = str.search(/e/i)) > 0) {\n\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n\n          // Integer.\n          e = str.length;\n        }\n\n      } else {\n\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base');\n\n        // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        str = String(v);\n\n        if (isNum = typeof v == 'number') {\n\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\n\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error\n             (tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0;\n\n        // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        }\n\n        // Prevent later check for length on converted number.\n        isNum = false;\n        str = convertBase(str, b, 10, x.s);\n\n        // Decimal point?\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n        else e = str.length;\n      }\n\n      // Determine leading zeros.\n      for (i = 0; str.charCodeAt(i) === 48; i++);\n\n      // Determine trailing zeros.\n      for (len = str.length; str.charCodeAt(--len) === 48;);\n\n      if (str = str.slice(i, ++len)) {\n        len -= i;\n\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n        if (isNum && BigNumber.DEBUG &&\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n            throw Error\n             (tooManyDigits + (x.s * v));\n        }\n\n         // Overflow?\n        if ((e = e - i - 1) > MAX_EXP) {\n\n          // Infinity.\n          x.c = x.e = null;\n\n        // Underflow?\n        } else if (e < MIN_EXP) {\n\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = [];\n\n          // Transform base\n\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE;  // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0');\n          x.c.push(+str);\n        }\n      } else {\n\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    }\n\n\n    // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n\n\n    /*\n     * Configure infrequently-changing library-wide settings.\n     *\n     * Accept an object with the following optional properties (if the value of a property is\n     * a number, it must be an integer within the inclusive range stated):\n     *\n     *   DECIMAL_PLACES   {number}           0 to MAX\n     *   ROUNDING_MODE    {number}           0 to 8\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n     *   CRYPTO           {boolean}          true or false\n     *   MODULO_MODE      {number}           0 to 9\n     *   POW_PRECISION       {number}           0 to MAX\n     *   ALPHABET         {string}           A string of two or more unique characters which does\n     *                                       not contain '.'.\n     *   FORMAT           {object}           An object with some of the following properties:\n     *     prefix                 {string}\n     *     groupSize              {number}\n     *     secondaryGroupSize     {number}\n     *     groupSeparator         {string}\n     *     decimalSeparator       {string}\n     *     fractionGroupSize      {number}\n     *     fractionGroupSeparator {string}\n     *     suffix                 {string}\n     *\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\n     *\n     * E.g.\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n     *\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n     *\n     * Return an object with the properties current values.\n     */\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n\n        if (typeof obj == 'object') {\n\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          }\n\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          }\n\n          // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          }\n\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error\n                 (bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          }\n\n          // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto &&\n                 (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error\n                   (bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error\n               (bignumberError + p + ' not true or false: ' + v);\n            }\n          }\n\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          }\n\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          }\n\n          // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;\n            else throw Error\n             (bignumberError + p + ' not an object: ' + v);\n          }\n\n          // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p];\n\n            // Disallow if less than two characters,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\n              ALPHABET = v;\n            } else {\n              throw Error\n               (bignumberError + p + ' invalid: ' + v);\n            }\n          }\n\n        } else {\n\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error\n           (bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n\n\n    /*\n     * Return true if v is a BigNumber instance, otherwise return false.\n     *\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\n     *\n     * v {any}\n     *\n     * '[BigNumber Error] Invalid BigNumber: {v}'\n     */\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n\n      var i, n,\n        c = v.c,\n        e = v.e,\n        s = v.s;\n\n      out: if ({}.toString.call(c) == '[object Array]') {\n\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          }\n\n          // Calculate number of digits that c[0] should have, based on the exponent.\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE;\n\n          // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n          if (String(c[0]).length == i) {\n\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            }\n\n            // Last element cannot be zero, unless it is the only element.\n            if (n !== 0) return true;\n          }\n        }\n\n      // Infinity/NaN\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n\n      throw Error\n        (bignumberError + 'Invalid BigNumber: ' + v);\n    };\n\n\n    /*\n     * Return a new BigNumber whose value is the maximum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n\n\n    /*\n     * Return a new BigNumber whose value is the minimum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n\n\n    /*\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n     * zeros are produced).\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n     * '[BigNumber Error] crypto unavailable'\n     */\n    BigNumber.random = (function () {\n      var pow2_53 = 0x20000000000000;\n\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n       ? function () { return mathfloor(Math.random() * pow2_53); }\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n         (Math.random() * 0x800000 | 0); };\n\n      return function (dp) {\n        var a, b, e, k, v,\n          i = 0,\n          c = [],\n          rand = new BigNumber(ONE);\n\n        if (dp == null) dp = DECIMAL_PLACES;\n        else intCheck(dp, 0, MAX);\n\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n              // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n            i = k / 2;\n\n          // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error\n             (bignumberError + 'crypto unavailable');\n          }\n        }\n\n        // Use Math.random.\n        if (!CRYPTO) {\n\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE;\n\n        // Convert trailing digits to zeros according to dp.\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        }\n\n        // Remove trailing elements which are zero.\n        for (; c[i] === 0; c.pop(), i--);\n\n        // Zero?\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n          // Count the digits of the first element of c to determine leading zeros, and...\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n          // adjust the exponent accordingly.\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    })();\n\n\n    /*\n     * Return a BigNumber whose value is the sum of the arguments.\n     *\n     * arguments {number|string|BigNumber}\n     */\n    BigNumber.sum = function () {\n      var i = 1,\n        args = arguments,\n        sum = new BigNumber(args[0]);\n      for (; i < args.length;) sum = sum.plus(args[i++]);\n      return sum;\n    };\n\n\n    // PRIVATE FUNCTIONS\n\n\n    // Called by BigNumber and BigNumber.prototype.toString.\n    convertBase = (function () {\n      var decimal = '0123456789';\n\n      /*\n       * Convert string of baseIn to an array of numbers of baseOut.\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n       */\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n          arr = [0],\n          arrL,\n          i = 0,\n          len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      }\n\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet, d, e, k, r, x, xc, y,\n          i = str.indexOf('.'),\n          dp = DECIMAL_PLACES,\n          rm = ROUNDING_MODE;\n\n        // Non-integer.\n        if (i >= 0) {\n          k = POW_PRECISION;\n\n          // Unlimited precision.\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k;\n\n          // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n           10, baseOut, decimal);\n          y.e = y.c.length;\n        }\n\n        // Convert the number as integer.\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n         ? (alphabet = ALPHABET, decimal)\n         : (alphabet = decimal, ALPHABET));\n\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\n        e = k = xc.length;\n\n        // Remove trailing zeros.\n        for (; xc[--k] == 0; xc.pop());\n\n        // Zero?\n        if (!xc[0]) return alphabet.charAt(0);\n\n        // Does str represent an integer? If so, no need for the division.\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e;\n\n          // The sign is needed for correct rounding.\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        }\n\n        // xc now represents str converted to baseOut.\n\n        // THe index of the rounding digit.\n        d = e + dp + 1;\n\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\n        i = xc[d];\n\n        // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n               rm == (x.s < 0 ? 8 : 7));\n\n        // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n        if (d < 1 || !xc[0]) {\n\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n\n          // Truncate xc to the required number of decimal places.\n          xc.length = d;\n\n          // Round up?\n          if (r) {\n\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          }\n\n          // Determine trailing zeros.\n          for (k = xc.length; !xc[--k];);\n\n          // E.g. [4, 11, 15] becomes 4bf.\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n          // Add leading zeros, decimal point and trailing zeros as required.\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        }\n\n        // The caller will add the sign.\n        return str;\n      };\n    })();\n\n\n    // Perform division in the specified base. Called by div and convertBase.\n    div = (function () {\n\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m, temp, xlo, xhi,\n          carry = 0,\n          i = x.length,\n          klo = k % SQRT_BASE,\n          khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n\n          for (i = cmp = 0; i < aL; i++) {\n\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0;\n\n        // Subtract b from a.\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n\n        // Remove leading zeros.\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\n      }\n\n      // x: dividend, y: divisor.\n      return function (x, y, dp, rm, base) {\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n          yL, yz,\n          s = x.s == y.s ? 1 : -1,\n          xc = x.c,\n          yc = y.c;\n\n        // Either NaN, Infinity or 0?\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n\n          return new BigNumber(\n\n           // Return NaN if either NaN, or both Infinity or 0.\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n         );\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        }\n\n        // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2;\n\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1));\n\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL; rem[remL++] = 0);\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++;\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yc, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n\n              // Calculate trial digit, n.\n\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // n is how many times the divisor goes into the current remainder.\n              n = mathfloor(rem0 / yc0);\n\n              //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                }\n\n                // product = divisor\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n              remL = rem.length;\n\n               // If product was < remainder.\n              if (cmp == -1) {\n\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n\n            // Add the next digit, n, to the result array.\n            qc[i++] = n;\n\n            // Update the remainder.\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null;\n\n          // Leading zero?\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n        // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    })();\n\n\n    /*\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\n     * notation rounded to the specified decimal places or significant digits.\n     *\n     * n: a BigNumber.\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\n     * rm: the rounding mode.\n     * id: 1 (toExponential) or 2 (toPrecision).\n     */\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n\n      if (rm == null) rm = ROUNDING_MODE;\n      else intCheck(rm, 0, 8);\n\n      if (!n.c) return n.toString();\n\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\n         ? toExponential(str, ne)\n         : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm);\n\n        // n.e may have changed if the value was rounded up.\n        e = n.e;\n\n        str = coeffToString(n.c);\n        len = str.length;\n\n        // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n\n        // Exponential notation.\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n          // Append zeros?\n          for (; len < i; str += '0', len++);\n          str = toExponential(str, e);\n\n        // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0');\n\n          // Append zeros?\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0');\n          } else {\n            i += e - len;\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n              for (; i--; str += '0');\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    }\n\n\n    // Handle BigNumber.max and BigNumber.min.\n    function maxOrMin(args, method) {\n      var n,\n        i = 1,\n        m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]);\n\n        // If any number is NaN, return NaN.\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n\n\n    /*\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n     * Called by minus, plus and times.\n     */\n    function normalise(n, c, e) {\n      var i = 1,\n        j = c.length;\n\n       // Remove trailing zeros.\n      for (; !c[--j]; c.pop());\n\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\n      for (j = c[0]; j >= 10; j /= 10, i++);\n\n      // Overflow?\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n        // Infinity.\n        n.c = n.e = null;\n\n      // Underflow?\n      } else if (e < MIN_EXP) {\n\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    }\n\n\n    // Handle values that fail the validity test in BigNumber.\n    parseNumeric = (function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n        dotAfter = /^([^.]+)\\.$/,\n        dotBefore = /^\\.([^.]+)$/,\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n      return function (x, str, isNum, b) {\n        var base,\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n        // No exception on ±Infinity or NaN.\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b;\n\n              // E.g. '1.' to '1', '.1' to '0.1'\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          }\n\n          // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n          if (BigNumber.DEBUG) {\n            throw Error\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          }\n\n          // NaN\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n      }\n    })();\n\n\n    /*\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n     * If r is truthy, it is known that there are more digits after the rounding digit.\n     */\n    function round(x, sd, rm, r) {\n      var d, i, j, k, n, ni, rd,\n        xc = x.c,\n        pows10 = POWS_TEN;\n\n      // if x is not Infinity or NaN...\n      if (xc) {\n\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n          i = sd - d;\n\n          // If the rounding digit is in the first element of xc...\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0];\n\n            // Get the rounding digit at index j of n.\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n\n              if (r) {\n\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0));\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni];\n\n              // Get the number of digits of n.\n              for (d = 1; k >= 10; k /= 10, d++);\n\n              // Get the index of rd within n.\n              i %= LOG_BASE;\n\n              // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n              j = i - LOG_BASE + d;\n\n              // Get the rounding digit at index j of n.\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 ||\n\n          // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n          r = rm < 4\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n            // Check whether the digit to the left of the rounding digit is odd.\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n             rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n\n              // Convert sd to decimal places.\n              sd -= x.e + 1;\n\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          }\n\n          // Remove excess digits.\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i];\n\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          }\n\n          // Round up?\n          if (r) {\n\n            for (; ;) {\n\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                j = xc[0] += k;\n                for (k = 1; j >= 10; j /= 10, k++);\n\n                // if i != k the length has increased.\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          }\n\n          // Remove trailing zeros.\n          for (i = xc.length; xc[--i] === 0; xc.pop());\n        }\n\n        // Overflow? Infinity.\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null;\n\n        // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n\n    function valueOf(n) {\n      var str,\n        e = n.e;\n\n      if (e === null) return n.toString();\n\n      str = coeffToString(n.c);\n\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n        ? toExponential(str, e)\n        : toFixedPoint(str, e, '0');\n\n      return n.s < 0 ? '-' + str : str;\n    }\n\n\n    // PROTOTYPE/INSTANCE METHODS\n\n\n    /*\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\n     */\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n\n\n    /*\n     * Return\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n     *   0 if they have the same value,\n     *   or null if the value of either is NaN.\n     */\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n\n\n    /*\n     * If dp is undefined or null or true or false, return the number of decimal places of the\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n     *\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n     * ROUNDING_MODE if rm is omitted.\n     *\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n     */\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c, n, v,\n        x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;\n        else intCheck(rm, 0, 8);\n\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last number.\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n      if (n < 0) n = 0;\n\n      return n;\n    };\n\n\n    /*\n     *  n / 0 = I\n     *  n / N = N\n     *  n / I = 0\n     *  0 / n = 0\n     *  0 / 0 = N\n     *  0 / N = N\n     *  0 / I = 0\n     *  N / n = N\n     *  N / 0 = N\n     *  N / N = N\n     *  N / I = N\n     *  I / n = I\n     *  I / 0 = I\n     *  I / N = N\n     *  I / I = N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n     */\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n\n\n    /*\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\n     * BigNumber by the value of BigNumber(y, b).\n     */\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n\n\n    /*\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n     *\n     * If m is present, return the result modulo m.\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n     *\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n     *\n     * n {number|string|BigNumber} The exponent. An integer.\n     * [m] {number|string|BigNumber} The modulus.\n     *\n     * '[BigNumber Error] Exponent not an integer: {n}'\n     */\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\n        x = this;\n\n      n = new BigNumber(n);\n\n      // Allow NaN and ±Infinity, but not other non-integers.\n      if (n.c && !n.isInteger()) {\n        throw Error\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m);\n\n      // Exponent of MAX_SAFE_INTEGER is 15.\n      nIsBig = n.e > 14;\n\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n        if (isModExp) x = x.mod(m);\n\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n        // [1, 240000000]\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n        // [80000000000000]  [99999750000000]\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n        // If x >= 1, k = ±Infinity.\n        if (x.e > -1) k = 1 / k;\n\n        // If n is negative return ±0, else return ±Infinity.\n        return new BigNumber(nIsNeg ? 1 / k : k);\n\n      } else if (POW_PRECISION) {\n\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE);\n\n      // Performs 54 loop iterations for n of 9007199254740991.\n      for (; ;) {\n\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n     *\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n     */\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;\n      else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n     * otherwise return false.\n     */\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\n     */\n    P.isFinite = function () {\n      return !!this.c;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n     * otherwise return false.\n     */\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is greater than or equal to the value of\n     * BigNumber(y, b), otherwise return false.\n     */\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\n     */\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n     * otherwise return false.\n     */\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is less than or equal to the value of\n     * BigNumber(y, b), otherwise return false.\n     */\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\n     */\n    P.isNaN = function () {\n      return !this.s;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is negative, otherwise return false.\n     */\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is positive, otherwise return false.\n     */\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n\n\n    /*\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n     */\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n\n\n    /*\n     *  n - 0 = n\n     *  n - N = N\n     *  n - I = -I\n     *  0 - n = -n\n     *  0 - 0 = 0\n     *  0 - N = N\n     *  0 - I = -I\n     *  N - n = N\n     *  N - 0 = N\n     *  N - N = N\n     *  N - I = N\n     *  I - n = I\n     *  I - 0 = I\n     *  I - N = N\n     *  I - I = N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n     * BigNumber(y, b).\n     */\n    P.minus = function (y, b) {\n      var i, j, t, xLTy,\n        x = this,\n        a = x.s;\n\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n\n      if (!xe || !ye) {\n\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n           ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Determine which is the bigger number.\n      if (a = xe - ye) {\n\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse();\n\n        // Prepend zeros to equalise exponents.\n        for (b = a; b--; t.push(0));\n        t.reverse();\n      } else {\n\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      }\n\n      // x < y? Point xc to the array of the bigger number.\n      if (xLTy) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n      }  \n\n      b = (j = yc.length) - (i = xc.length);\n\n      // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n      if (b > 0) for (; b--; xc[i++] = 0);\n      b = BASE - 1;\n\n      // Subtract yc from xc.\n      for (; j > a;) {\n\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b);\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      }\n\n      // Remove leading zeros and adjust exponent accordingly.\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n      // Zero?\n      if (!xc[0]) {\n\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      }\n\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n      return normalise(y, xc, ye);\n    };\n\n\n    /*\n     *   n % 0 =  N\n     *   n % N =  N\n     *   n % I =  n\n     *   0 % n =  0\n     *  -0 % n = -0\n     *   0 % 0 =  N\n     *   0 % N =  N\n     *   0 % I =  0\n     *   N % n =  N\n     *   N % 0 =  N\n     *   N % N =  N\n     *   N % I =  N\n     *   I % n =  N\n     *   I % 0 =  N\n     *   I % N =  N\n     *   I % I =  N\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n     */\n    P.modulo = P.mod = function (y, b) {\n      var q, s,\n        x = this;\n\n      y = new BigNumber(y, b);\n\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN);\n\n      // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y));\n\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n      return y;\n    };\n\n\n    /*\n     *  n * 0 = 0\n     *  n * N = N\n     *  n * I = I\n     *  0 * n = 0\n     *  0 * 0 = 0\n     *  0 * N = N\n     *  0 * I = N\n     *  N * n = N\n     *  N * 0 = N\n     *  N * N = N\n     *  N * I = N\n     *  I * n = I\n     *  I * 0 = N\n     *  I * N = N\n     *  I * I = I\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n     * of BigNumber(y, b).\n     */\n    P.multipliedBy = P.times = function (y, b) {\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n        base, sqrtBase,\n        x = this,\n        xc = x.c,\n        yc = (y = new BigNumber(y, b)).c;\n\n      // Either NaN, ±Infinity or ±0?\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s;\n\n          // Return ±Infinity if either is ±Infinity.\n          if (!xc || !yc) {\n            y.c = y.e = null;\n\n          // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length;\n\n      // Ensure xc points to longer array and xcL to its length.\n      if (xcL < ycL) {\n        zc = xc;\n        xc = yc;\n        yc = zc;\n        i = xcL;\n        xcL = ycL;\n        ycL = i;\n      }  \n\n      // Initialise the result array with zeros.\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\n     * i.e. multiplied by -1.\n     */\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n\n\n    /*\n     *  n + 0 = n\n     *  n + N = N\n     *  n + I = I\n     *  0 + n = n\n     *  0 + 0 = 0\n     *  0 + N = N\n     *  0 + I = I\n     *  N + n = N\n     *  N + 0 = N\n     *  N + N = N\n     *  N + I = N\n     *  I + n = I\n     *  I + 0 = I\n     *  I + N = N\n     *  I + I = I\n     *\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n     * BigNumber(y, b).\n     */\n    P.plus = function (y, b) {\n      var t,\n        x = this,\n        a = x.s;\n\n      y = new BigNumber(y, b);\n      b = y.s;\n\n      // Either NaN?\n      if (!a || !b) return new BigNumber(NaN);\n\n      // Signs differ?\n       if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n        ye = y.e / LOG_BASE,\n        xc = x.c,\n        yc = y.c;\n\n      if (!xe || !ye) {\n\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0);\n\n        // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice();\n\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n        for (; a--; t.push(0));\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length;\n\n      // Point xc to the longer array, and b to the shorter length.\n      if (a - b < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n        b = a;\n      }  \n\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      }\n\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n      return normalise(y, xc, ye);\n    };\n\n\n    /*\n     * If sd is undefined or null or true or false, return the number of significant digits of\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n     * If sd is true include integer-part trailing zeros in the count.\n     *\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n     * ROUNDING_MODE if rm is omitted.\n     *\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n     */\n    P.precision = P.sd = function (sd, rm) {\n      var c, n, v,\n        x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;\n        else intCheck(rm, 0, 8);\n\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--);\n\n        // Add the number of digits of the first element.\n        for (v = c[0]; v >= 10; v /= 10, n++);\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n\n      return n;\n    };\n\n\n    /*\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n     *\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n     */\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n\n\n    /*\n     *  sqrt(-n) =  N\n     *  sqrt(N) =  N\n     *  sqrt(-I) =  N\n     *  sqrt(I) =  I\n     *  sqrt(0) =  0\n     *  sqrt(-0) = -0\n     *\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n     */\n    P.squareRoot = P.sqrt = function () {\n      var m, n, r, rep, t,\n        x = this,\n        c = x.c,\n        s = x.s,\n        e = x.e,\n        dp = DECIMAL_PLACES + 4,\n        half = new BigNumber('0.5');\n\n      // Negative/NaN/Infinity/zero?\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      }\n\n      // Initial estimate.\n      s = Math.sqrt(+valueOf(x));\n\n      // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '5e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      }\n\n      // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0;\n\n        // Newton-Raphson iteration.\n        for (; ;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1);\n\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n            if (n == '9999' || !rep && n == '4999') {\n\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n\n\n    /*\n     * Return a string representing the value of this BigNumber in exponential notation and\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n     */\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n      return format(this, dp, rm, 1);\n    };\n\n\n    /*\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n     *\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n     */\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n      return format(this, dp, rm);\n    };\n\n\n    /*\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n     * of the format or FORMAT object (see BigNumber.set).\n     *\n     * The formatting object may contain some or all of the properties shown below.\n     *\n     * FORMAT = {\n     *   prefix: '',\n     *   groupSize: 3,\n     *   secondaryGroupSize: 0,\n     *   groupSeparator: ',',\n     *   decimalSeparator: '.',\n     *   fractionGroupSize: 0,\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\n     *   suffix: ''\n     * };\n     *\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     * [format] {object} Formatting options. See FORMAT pbject above.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n     * '[BigNumber Error] Argument not an object: {format}'\n     */\n    P.toFormat = function (dp, rm, format) {\n      var str,\n        x = this;\n\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error\n          (bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n          arr = str.split('.'),\n          g1 = +format.groupSize,\n          g2 = +format.secondaryGroupSize,\n          groupSeparator = format.groupSeparator || '',\n          intPart = arr[0],\n          fractionPart = arr[1],\n          isNeg = x.s < 0,\n          intDigits = isNeg ? intPart.slice(1) : intPart,\n          len = intDigits.length;\n\n        if (g2) {\n          i = g1;\n          g1 = g2;\n          g2 = i;\n          len -= i;\n        }  \n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n           '$&' + (format.fractionGroupSeparator || ''))\n          : fractionPart)\n         : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n\n\n    /*\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\n     * fraction with an integer numerator and an integer denominator.\n     * The denominator will be a positive non-zero value less than or equal to the specified\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\n     * the lowest value necessary to represent the number exactly.\n     *\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n     *\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n     */\n    P.toFraction = function (md) {\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\n        x = this,\n        xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md);\n\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error\n            (bignumberError + 'Argument ' +\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc);\n\n      // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s);\n\n      // n0 = d1 = 0\n      n0.c[0] = 0;\n\n      for (; ;)  {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2;\n\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n\n      MAX_EXP = exp;\n\n      return r;\n    };\n\n\n    /*\n     * Return the value of this BigNumber converted to a number primitive.\n     */\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n\n\n    /*\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n     * necessary to represent the integer part of the value in fixed-point notation, then use\n     * exponential notation.\n     *\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n     *\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n     */\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n\n\n    /*\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n     * TO_EXP_NEG, return exponential notation.\n     *\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n     *\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n     */\n    P.toString = function (b) {\n      var str,\n        n = this,\n        s = n.s,\n        e = n.e;\n\n      // Infinity or NaN?\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n           ? toExponential(coeffToString(n.c), e)\n           : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n\n\n    /*\n     * Return as toString, but do not accept a base argument, and include the minus sign for\n     * negative zero.\n     */\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n\n    P._isBigNumber = true;\n\n    if (configObject != null) BigNumber.set(configObject);\n\n    return BigNumber;\n  }\n\n\n  // PRIVATE HELPER FUNCTIONS\n\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  }\n\n\n  // Return a coefficient array as a string of base 10 digits.\n  function coeffToString(a) {\n    var s, z,\n      i = 1,\n      j = a.length,\n      r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n      for (; z--; s = '0' + s);\n      r += s;\n    }\n\n    // Determine trailing zeros.\n    for (j = r.length; r.charCodeAt(--j) === 48;);\n\n    return r.slice(0, j + 1 || 1);\n  }\n\n\n  // Compare the value of BigNumbers x and y.\n  function compare(x, y) {\n    var a, b,\n      xc = x.c,\n      yc = y.c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either NaN?\n    if (!i || !j) return null;\n\n    a = xc && !xc[0];\n    b = yc && !yc[0];\n\n    // Either zero?\n    if (a || b) return a ? b ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n\n    a = i < 0;\n    b = k == l;\n\n    // Either Infinity?\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n    // Compare exponents.\n    if (!b) return k > l ^ a ? 1 : -1;\n\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n\n\n  /*\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\n   */\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n         : ' not a primitive number: ') + String(n));\n    }\n  }\n\n\n  // Assumes finite n.\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n     (e < 0 ? 'e' : 'e+') + e;\n  }\n\n\n  function toFixedPoint(str, e, z) {\n    var len, zs;\n\n    // Negative exponent?\n    if (e < 0) {\n\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z);\n      str = zs + str;\n\n    // Positive exponent\n    } else {\n      len = str.length;\n\n      // Append zeros.\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z);\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  }\n\n\n  // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n\n  // AMD.\n  if (typeof define == 'function' && define.amd) {\n    define(function () { return BigNumber; });\n\n  // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber;\n\n  // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(this);\n","const BigNumber = require('bignumber.js');\n\nconst SIWeight = function (weight){\n    const gram = new BigNumber(weight.toString());\n\n    this.getGram = () => gram;\n}\n\n\nSIWeight.prototype = {\n    get gram() {\n        return parseFloat(this.getGram().toString());\n    }\n}\n\nmodule.exports = SIWeight;","const SIWeight = require('./si-gold-weight');\nconst BigNumber = require('bignumber.js');\n\n\nconst ONE_PATETHA_IN_KYAT = new BigNumber('100');\nconst ONE_KYAT_IN_PAE = new BigNumber('16');\nconst ONE_KYAT_IN_YWAY = new BigNumber('128');\nconst ONE_PAE_IN_YWAY = new BigNumber('8');\nconst ONE_KYAT_IN_GRAM = new BigNumber('16.66666666');\nconst ONE_PAE_IN_GRAM = ONE_KYAT_IN_GRAM.dividedBy(ONE_KYAT_IN_PAE);\n\n\nconst PrintType = Object.freeze({\n    KYAT:'KYAT',\n    PAE:'PAE',\n    YWAY:'YWAY',\n    PATETHA:'PATETHA',\n    GRAM:'GRAM'\n});\n\nconst BurmeseGoldWeight = function (weight) {\n    let patetha = new BigNumber('0'), \n        kyat = new BigNumber('0'), \n        pae = new BigNumber('0'), \n        yway = new BigNumber('0');\n    \n\n\n\n    const kyatToBurmeseWeight = (kyat) => {\n        let pa, k, p, y;\n        // console.log('total kyat', kyat.toString());\n\n        const mol = new BigNumber('1');\n\n        pa = kyat.dividedBy(ONE_PATETHA_IN_KYAT);\n        pa = pa.minus(pa.modulo(mol)).toString();\n\n        k = kyat.minus(new BigNumber(pa).multipliedBy(ONE_PATETHA_IN_KYAT));\n        k = k.minus(k.modulo(mol)).toString();\n\n        p = kyat.minus(new BigNumber(pa).multipliedBy(ONE_PATETHA_IN_KYAT)).minus(new BigNumber(k)).multipliedBy(ONE_KYAT_IN_PAE);\n        p = p.minus(p.modulo(mol)).toString();\n\n        y = kyat.minus(new BigNumber(pa).multipliedBy(ONE_PATETHA_IN_KYAT))\n                .minus(new BigNumber(k))\n                .minus(new BigNumber(p).dividedBy(ONE_KYAT_IN_PAE))\n                .multipliedBy(ONE_KYAT_IN_YWAY).toFixed(8);\n\n\n        // console.log(pa, k, p, y);\n\n        return {\n            patetha: BigNumber(pa),\n            kyat: BigNumber(k),\n            pae: BigNumber(p),\n            yway: BigNumber(y)\n        };\n    }\n\n    const fromGram = (gram) => {\n        const k = gram.dividedBy(ONE_KYAT_IN_GRAM);\n        return kyatToBurmeseWeight(k);\n    }\n\n    constructor(weight);\n    function constructor(weight){\n        // console.log(typeof weight);\n        // console.log(weight instanceof SIWeight)\n        if(typeof weight == 'number'){ // number in gram\n            let w = fromGram(new BigNumber(weight));\n            patetha = w.patetha;\n            kyat = w.kyat;\n            pae = w.pae;\n            yway = w.yway;\n        }else if(weight instanceof SIWeight){\n            let w = fromGram(weight.getGram());\n            patetha = w.patetha;\n            kyat = w.kyat;\n            pae = w.pae;\n            yway = w.yway;\n        }else if(typeof weight == 'object'){\n            if(weight.kyat < 0 && weight.kyat >= 100) throw new Error(\"Burmese Kyat must be between 0 ~ <100\");\n            if(weight.pae < 0 && weight.pae >= 16) throw new Error(\"Burmese Pae must be between 0 ~ <16\");\n            if(weight.yway < 0 && weight.yway >= 8) throw new Error(\"Burmese Kyat must be between 0 ~ <8\");\n\n\n            patetha = new BigNumber(weight.patetha.toString());\n            kyat = new BigNumber(weight.kyat.toString());\n            pae = new BigNumber(weight.pae.toString());\n            yway = new BigNumber(weight.yway.toString());\n        }\n    }\n\n    \n\n\n    // getter\n    this.getPatetha = () => patetha;\n    this.getKyat = () => kyat;\n    this.getPae = () => pae;\n    this.getYway = () => yway;\n\n\n    this.toPatetha = () => {\n        const kyat = this.toKyat();\n        return kyat.dividedBy(ONE_PATETHA_IN_KYAT);\n    }\n\n    this.toKyat = () => {\n        const pae = this.toPae();\n        return pae.dividedBy(ONE_KYAT_IN_PAE);\n    }\n    \n    this.toPae = () => {\n        const result = patetha.multipliedBy(ONE_PATETHA_IN_KYAT.multipliedBy(ONE_KYAT_IN_PAE))\n                            .plus(kyat.multipliedBy(ONE_KYAT_IN_PAE))\n                            .plus(pae)\n                            .plus(yway.dividedBy(ONE_PAE_IN_YWAY))\n        return result;\n    }\n\n    this.toYway = () => {\n        const pae = this.toPae();\n        return pae.dividedBy(ONE_PAE_IN_YWAY);\n    }\n\n    this.toGram = () => {\n        const pae = this.toPae();\n        return pae.multipliedBy(ONE_PAE_IN_GRAM);\n    }\n\n    this.byBurmeseGoldQuality = (quality) => {\n        if(isNaN(quality)) throw new Error('Burmese gold quality must be a number');\n        if(quality < 0 && quality > 16) throw new Error('Burmese gold quality must betwee 0~16');\n\n        const qualityRatio = new BigNumber(quality).dividedBy(new BigNumber('16'));\n        const rawResult = this.toPae().multipliedBy(qualityRatio);\n        const gram = parseFloat(rawResult.multipliedBy(ONE_PAE_IN_GRAM).toString());\n        // console.log(gram);\n        return new BurmeseGoldWeight(gram);\n    }\n\n    this.byInternationalGoldQuality = (k) => {\n        if(isNaN(k)) throw new Error('Gold quality \"K\" must be a number');\n        if(k < 0 && k > 24) throw new Error('International gold quality must betwee 0~24');\n\n        const qualityRatio = new BigNumber(k).dividedBy(new BigNumber('24')).multipliedBy(new BigNumber('16'));\n        const rawResult = this.toPae().multipliedBy(qualityRatio);\n        const gram = parseFloat(rawResult.multipliedBy(ONE_PAE_IN_GRAM).toString());\n        return new BurmeseGoldWeight(gram);\n    }\n\n    this.add = (burmeseGoldWeight) => {\n        if(!(burmeseGoldWeight instanceof BurmeseGoldWeight)) throw new Error('addition must be an instance of BurmeseGoldWeight');\n        const pae = this.toPae().add(burmeseGoldWeight.toPae());\n        const gram = parseFloat(pae.multipliedBy(ONE_PAE_IN_GRAM).toString());\n        return new BurmeseGoldWeight(gram);\n    }\n\n    this.substract = (burmeseGoldWeight) => {\n        if(!(burmeseGoldWeight instanceof BurmeseGoldWeight)) throw new Error('substraction must be an instance of BurmeseGoldWeight');\n        const pae = this.toPae().minus(burmeseGoldWeight.toPae());\n        const gram = parseFloat(pae.multipliedBy(ONE_PAE_IN_GRAM).toString());\n        return new BurmeseGoldWeight(gram);\n    }\n\n    this.getBurmeseMarketValuePrice = (burmeseGoldSpotPrice, marketGaps) => {\n        return this.toKyat().multipliedBy(burmeseGoldSpotPrice - (marketGaps && !isNaN(marketGaps) ? marketGaps : 0))\n    }\n}\n\n\nBurmeseGoldWeight.prototype = {\n    get patetha() {\n        return parseInt(this.getPatetha().toString());\n    },\n    get kyat() {\n        return parseInt(this.getKyat().toString());\n    },\n    get pae() {\n        return parseInt(this.getPae().toString());\n    },\n    get yway() {\n        return parseFloat(this.getYway().toString());\n    },\n    get weight() {\n        return {\n            patetha: this.patetha,\n            kyat: this.kyat,\n            pae: this.pae,\n            yway: this.yway\n        };\n    },\n    toString: function(){\n        const { patetha, kyat, pae, yway } = this.weight;\n        return `${patetha} ပိဿာ, ${kyat} ကျပ်, ${pae} ပဲ, ${yway} ရွေး`;\n    },\n    print: function (printType){\n        switch(printType){\n            case PrintType.KYAT: return `${this.toKyat().toString()} ကျပ်`;\n            case PrintType.PAE: return `${this.toPae().toString()} ပဲ`;\n            case PrintType.YWAY: return `${this.toYway().toString()} ရွေး`;\n            case PrintType.PATETHA: return `${this.toPatetha().toString()} ပိဿာ`;\n            case PrintType.GRAM: return `${this.toGram().toString()} ဂရမ်`;\n        }\n\n        return this.toString();\n    }\n}\n\n\nconst expo = module.exports = BurmeseGoldWeight;\n\nexpo.PrintType = PrintType;","const BurmeseGoldWeight = require('./burmese-gold-weight');\nconst SIWeight = require('./si-gold-weight');\n\nconst expo = module.exports;\n\nexpo.BurmeseGoldWeight = BurmeseGoldWeight;\nexpo.SIWeight = SIWeight;"],"names":["globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","module","exports","self","window","require$$0","SIWeight","weight","gram","getGram","parseFloat","siGoldWeight","require$$1","ONE_PATETHA_IN_KYAT","ONE_KYAT_IN_PAE","ONE_KYAT_IN_YWAY","ONE_PAE_IN_YWAY","ONE_KYAT_IN_GRAM","ONE_PAE_IN_GRAM","PrintType","Object","freeze","KYAT","PAE","YWAY","PATETHA","GRAM","BurmeseGoldWeight","patetha","kyat","pae","yway","fromGram","pa","mol","kyatToBurmeseWeight","w","getPatetha","getKyat","getPae","getYway","toPatetha","toKyat","toPae","toYway","toGram","byBurmeseGoldQuality","quality","qualityRatio","rawResult","byInternationalGoldQuality","add","burmeseGoldWeight","substract","getBurmeseMarketValuePrice","burmeseGoldSpotPrice","marketGaps","parseInt","print","printType","burmeseGoldWeightModule","expo"],"mappings":"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","x_google_ignoreList":[0]}